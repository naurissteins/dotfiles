(function() {
  var _, j, len1, p, pragmas, sortf, spell_var, variants;

  _ = require('underscore-plus');

  pragmas = ['LINE', 'OPTIONS', 'OPTIONS_GHC', 'OPTIONS_HADDOCK', 'LANGUAGE', 'INCLUDE', 'OPTIONS_HUGS', 'OPTIONS_NHC98', 'OPTIONS_JHC', 'OPTIONS_YHC', 'OPTIONS_CATCH', 'OPTIONS_DERIVE', 'CFILES', 'CONTRACT', 'RULES', 'INLINE', 'INLINABLE', 'INLINEABLE', 'NOTINLINE', 'SPECIALIZE', 'SOURCE', 'WARNING', 'DEPRECATED', 'SCC', 'GENERATED', 'CORE', 'UNPACK', 'NOUNPACK', 'ANN', 'VECTORIZE', 'NOVECTORIZE', 'MINIMAL', 'OVERLAPS', 'OVERLAPPABLE', 'OVERLAPPING', 'INCOHERENT', 'CTYPE', 'INLINE CONLIKE', 'NOTINLINE CONLIKE', 'SPECIALIZE INLINE', 'SPECIALIZE NOTINLINE', 'VECTORIZE SCALAR'];

  spell_var = _.invert({
    'NOINLINE': 'NOTINLINE',
    'SPECIALISE': 'SPECIALIZE',
    'VECTORISE': 'VECTORIZE',
    'NOVECTORISE': 'NOVECTORIZE',
    'CONSTRUCTORLIKE': 'CONLIKE'
  });

  variants = function(p) {
    var i, j, k, len, len1, mask, mask0, ref, ref1, results, w, ws;
    len = p.split(' ').length;
    mask0 = Math.pow(2, len) - 1;
    results = [];
    for (mask = j = 0, ref = mask0; 0 <= ref ? j <= ref : j >= ref; mask = 0 <= ref ? ++j : --j) {
      ws = p.split(' ');
      for (i = k = 0, len1 = ws.length; k < len1; i = ++k) {
        w = ws[i];
        if (mask & Math.pow(2, i)) {
          ws[i] = (ref1 = spell_var[w]) != null ? ref1 : w;
        }
      }
      results.push(ws.join(' '));
    }
    return results;
  };

  for (j = 0, len1 = pragmas.length; j < len1; j++) {
    p = pragmas[j];
    pragmas.push.apply(pragmas, variants(p));
  }

  sortf = function(a, b) {
    var d;
    d = b.length - a.length;
    if (d !== 0) {
      return d;
    } else {
      return a.localeCompare(b);
    }
  };

  module.exports = _.uniq(pragmas.sort(sortf));

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL2hvbWUvYXJjaC8uYXRvbS9wYWNrYWdlcy9sYW5ndWFnZS1oYXNrZWxsL3NyYy9pbmNsdWRlL3ByYWdtYXMuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUEsTUFBQTs7RUFBQSxDQUFBLEdBQUksT0FBQSxDQUFRLGlCQUFSOztFQUdKLE9BQUEsR0FBVSxDQUVSLE1BRlEsRUFJUixTQUpRLEVBS1IsYUFMUSxFQU1SLGlCQU5RLEVBT1IsVUFQUSxFQVFSLFNBUlEsRUFVUixjQVZRLEVBV1IsZUFYUSxFQVlSLGFBWlEsRUFhUixhQWJRLEVBY1IsZUFkUSxFQWVSLGdCQWZRLEVBZ0JSLFFBaEJRLEVBaUJSLFVBakJRLEVBbUJSLE9BbkJRLEVBb0JSLFFBcEJRLEVBcUJSLFdBckJRLEVBc0JSLFlBdEJRLEVBdUJSLFdBdkJRLEVBd0JSLFlBeEJRLEVBeUJSLFFBekJRLEVBMEJSLFNBMUJRLEVBMkJSLFlBM0JRLEVBNEJSLEtBNUJRLEVBNkJSLFdBN0JRLEVBOEJSLE1BOUJRLEVBK0JSLFFBL0JRLEVBZ0NSLFVBaENRLEVBaUNSLEtBakNRLEVBa0NSLFdBbENRLEVBbUNSLGFBbkNRLEVBb0NSLFNBcENRLEVBcUNSLFVBckNRLEVBc0NSLGNBdENRLEVBdUNSLGFBdkNRLEVBd0NSLFlBeENRLEVBeUNSLE9BekNRLEVBMkNSLGdCQTNDUSxFQTRDUixtQkE1Q1EsRUE2Q1IsbUJBN0NRLEVBOENSLHNCQTlDUSxFQStDUixrQkEvQ1E7O0VBbURWLFNBQUEsR0FBWSxDQUFDLENBQUMsTUFBRixDQUFTO0lBQ25CLFVBQUEsRUFBWSxXQURPO0lBRW5CLFlBQUEsRUFBYyxZQUZLO0lBR25CLFdBQUEsRUFBYSxXQUhNO0lBSW5CLGFBQUEsRUFBZSxhQUpJO0lBS25CLGlCQUFBLEVBQW1CLFNBTEE7R0FBVDs7RUFRWixRQUFBLEdBQVcsU0FBQyxDQUFEO0FBQ1QsUUFBQTtJQUFBLEdBQUEsR0FBTSxDQUFDLENBQUMsS0FBRixDQUFRLEdBQVIsQ0FBWSxDQUFDO0lBQ25CLEtBQUEsR0FBUSxJQUFJLENBQUMsR0FBTCxDQUFTLENBQVQsRUFBWSxHQUFaLENBQUEsR0FBbUI7QUFDM0I7U0FBWSxzRkFBWjtNQUNFLEVBQUEsR0FBSyxDQUFDLENBQUMsS0FBRixDQUFRLEdBQVI7QUFDTCxXQUFBLDhDQUFBOztRQUNFLElBQUcsSUFBQSxHQUFPLElBQUksQ0FBQyxHQUFMLENBQVMsQ0FBVCxFQUFZLENBQVosQ0FBVjtVQUNFLEVBQUcsQ0FBQSxDQUFBLENBQUgsMENBQXVCLEVBRHpCOztBQURGO21CQUdBLEVBQUUsQ0FBQyxJQUFILENBQVEsR0FBUjtBQUxGOztFQUhTOztBQVVYLE9BQUEsMkNBQUE7O0lBQ0UsT0FBTyxDQUFDLElBQVIsZ0JBQWEsUUFBQSxDQUFTLENBQVQsQ0FBYjtBQURGOztFQUdBLEtBQUEsR0FBUSxTQUFDLENBQUQsRUFBSSxDQUFKO0FBQ04sUUFBQTtJQUFBLENBQUEsR0FBSSxDQUFDLENBQUMsTUFBRixHQUFXLENBQUMsQ0FBQztJQUNqQixJQUFHLENBQUEsS0FBTyxDQUFWO2FBQ0UsRUFERjtLQUFBLE1BQUE7YUFHRSxDQUFDLENBQUMsYUFBRixDQUFnQixDQUFoQixFQUhGOztFQUZNOztFQU9SLE1BQU0sQ0FBQyxPQUFQLEdBQWlCLENBQUMsQ0FBQyxJQUFGLENBQU8sT0FBTyxDQUFDLElBQVIsQ0FBYSxLQUFiLENBQVA7QUFsRmpCIiwic291cmNlc0NvbnRlbnQiOlsiXyA9IHJlcXVpcmUgJ3VuZGVyc2NvcmUtcGx1cydcblxuIyBUYWtlbiBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9naGMvZ2hjL2Jsb2IvbWFzdGVyL2NvbXBpbGVyL3BhcnNlci9MZXhlci54I0wyNjczXG5wcmFnbWFzID0gW1xuICAjIExpbmUgcHJhZ21hXG4gICdMSU5FJ1xuICAjIEhlYWRlciBwcmFnbWFzXG4gICdPUFRJT05TJ1xuICAnT1BUSU9OU19HSEMnXG4gICdPUFRJT05TX0hBRERPQ0snXG4gICdMQU5HVUFHRSdcbiAgJ0lOQ0xVREUnXG4gICMgSWdub3JlZCBwcmFnbWFzXG4gICdPUFRJT05TX0hVR1MnXG4gICdPUFRJT05TX05IQzk4J1xuICAnT1BUSU9OU19KSEMnXG4gICdPUFRJT05TX1lIQydcbiAgJ09QVElPTlNfQ0FUQ0gnXG4gICdPUFRJT05TX0RFUklWRSdcbiAgJ0NGSUxFUydcbiAgJ0NPTlRSQUNUJ1xuICAjIE9uZS13b3JkIHByYWdtYXNcbiAgJ1JVTEVTJ1xuICAnSU5MSU5FJ1xuICAnSU5MSU5BQkxFJ1xuICAnSU5MSU5FQUJMRSdcbiAgJ05PVElOTElORSdcbiAgJ1NQRUNJQUxJWkUnXG4gICdTT1VSQ0UnXG4gICdXQVJOSU5HJ1xuICAnREVQUkVDQVRFRCdcbiAgJ1NDQydcbiAgJ0dFTkVSQVRFRCdcbiAgJ0NPUkUnXG4gICdVTlBBQ0snXG4gICdOT1VOUEFDSydcbiAgJ0FOTidcbiAgJ1ZFQ1RPUklaRSdcbiAgJ05PVkVDVE9SSVpFJ1xuICAnTUlOSU1BTCdcbiAgJ09WRVJMQVBTJ1xuICAnT1ZFUkxBUFBBQkxFJ1xuICAnT1ZFUkxBUFBJTkcnXG4gICdJTkNPSEVSRU5UJ1xuICAnQ1RZUEUnXG4gICMgVHdvIHdvcmQgcHJhZ21hc1xuICAnSU5MSU5FIENPTkxJS0UnXG4gICdOT1RJTkxJTkUgQ09OTElLRSdcbiAgJ1NQRUNJQUxJWkUgSU5MSU5FJ1xuICAnU1BFQ0lBTElaRSBOT1RJTkxJTkUnXG4gICdWRUNUT1JJWkUgU0NBTEFSJ1xuXVxuXG4jIFNwZWxsaW5nIHZhcmlhbnRzXG5zcGVsbF92YXIgPSBfLmludmVydCB7XG4gICdOT0lOTElORSc6ICdOT1RJTkxJTkUnXG4gICdTUEVDSUFMSVNFJzogJ1NQRUNJQUxJWkUnXG4gICdWRUNUT1JJU0UnOiAnVkVDVE9SSVpFJ1xuICAnTk9WRUNUT1JJU0UnOiAnTk9WRUNUT1JJWkUnXG4gICdDT05TVFJVQ1RPUkxJS0UnOiAnQ09OTElLRSdcbn1cblxudmFyaWFudHMgPSAocCkgLT5cbiAgbGVuID0gcC5zcGxpdCgnICcpLmxlbmd0aFxuICBtYXNrMCA9IE1hdGgucG93KDIsIGxlbikgLSAxXG4gIGZvciBtYXNrIGluIFswLi5tYXNrMF1cbiAgICB3cyA9IHAuc3BsaXQoJyAnKVxuICAgIGZvciB3LCBpIGluIHdzXG4gICAgICBpZiBtYXNrICYgTWF0aC5wb3coMiwgaSlcbiAgICAgICAgd3NbaV0gPSBzcGVsbF92YXJbd10gPyB3XG4gICAgd3Muam9pbignICcpXG5cbmZvciBwIGluIHByYWdtYXNcbiAgcHJhZ21hcy5wdXNoIHZhcmlhbnRzKHApLi4uXG5cbnNvcnRmID0gKGEsIGIpIC0+XG4gIGQgPSBiLmxlbmd0aCAtIGEubGVuZ3RoXG4gIGlmIGQgaXNudCAwXG4gICAgZFxuICBlbHNlXG4gICAgYS5sb2NhbGVDb21wYXJlIGJcblxubW9kdWxlLmV4cG9ydHMgPSBfLnVuaXEgcHJhZ21hcy5zb3J0IHNvcnRmXG4iXX0=
