'.source .haskell':
  'Pragma':
    'prefix': '{-#'
    'body': '{-# $1 #-'
  'Module':
    'prefix': 'module'
    'body':
      """
      module ${1:Name}
          (
          ) where
      """
  'Definition':
    'prefix': '='
    'body': '${1:name} ${2:pattern} = ${0:definition}'
  'Function':
    'prefix': 'fun'
    'body': '''
      ${1:name} :: ${2:Type}
      ${1} ${3:pattern} = ${4:definition}
      '''
  '#!/usr/bin/env…':
    'prefix': '#!'
    'body': '#!/usr/bin/env ${1:runhaskell}'
  'Lambda Expression':
    'prefix': '\\'
    'body': "\\\\${1:pattern} -> ${0:expression}"
  'Left Arrow':
    'prefix': '<'
    'body': '${1:name} <- ${0:expression}'
  'Main':
    'prefix': 'main'
    'body': '''
      module Main where

      main :: IO ()
      main = ${0:putStrLn "Hello World"}
      '''
  'Right Arrow':
    'prefix': '>'
    'body': '${1:expression} -> ${0:expression}'
  'case … of …':
    'prefix': 'case'
    'body': '''
      case ${1:expression} of
      \t${2:pattern} -> ${3:expression}
      \t${4:otherwise} -> ${5:expression}
      '''
  'class …':
    'prefix': 'cla'
    'body': '''
      class ${1:Class} where
      \t${0:definition}
      '''
  'data …':
    'prefix': 'dat'
    'body': 'data ${1:Type} = ${0:Other}'
  'do …':
    'prefix': 'do'
    'body': '''
      do
      \t${1:return ${0:expression}}
      '''
  'if … then … else …':
    'prefix': 'if'
    'body': '''
      if ${1:condition}
      \tthen ${2:expression}
      \telse ${3:expression}
      '''
  'import … hiding …':
    'prefix': 'imph'
    'body': 'import ${1:Module} hiding (${2:function})'
  'import …':
    'prefix': 'imp'
    'body': 'import ${1:Module}'
  'import qualified …':
    'prefix': 'impq'
    'body': 'import qualified ${1:Module}${2: as ${3:Mod}}'
  'instance …':
    'prefix': 'ins'
    'body': '''
      instance ${1:Class} ${2:Type} where
      \t${0:definition}
      '''
  'let …':
    'prefix': 'let'
    'body': '''
      let
      \t${1:name} = ${2:expression}
      \tin ${0:expression}
      '''
  'newtype …':
    'prefix': 'new'
    'body': 'newtype ${1:Type} = ${0:Other}'
  'type …':
    'prefix': 'typ'
    'body': 'type ${1:Type} = ${0:Other}'
  'where …':
    'prefix': 'where'
    'body': '''
      where
      \t${0:definitions}
      '''
  'INLINE':
    'prefix': 'INL'
    'body': '{-# INLINE ${1:function} #-}'
  'NOINLINE':
    'prefix': 'NOINL'
    'body': '{-# NOINLINE ${1:function} #-}'
  'INLINABLE':
    'prefix': 'INLINABLE'
    'body': '{-# INLINABLE ${1:function} #-}'
  'LANGUAGE':
    'prefix': 'LANG'
    'body': '{-# LANGUAGE ${1:ext} #-}'
  'UNPACK':
    'prefix': 'UNPACK'
    'body': '{-# UNPACK #-} '
  'OPTIONS_GHC':
    'prefix': 'GHC'
    'body': '{-# OPTIONS_GHC -${1:option} #-}'
  ###### UNICODE ######
  'Proportion':
    'prefix': '::'
    'body': '∷' #0x2237
  'Rightwards double arrow':
    'prefix': '=>'
    'body': '⇒'
  'For all':
    'prefix': 'forall'
    'body': '∀' #0x2200
  'Rightwards arrow':
    'prefix': '->'
    'body': '→' #  0x2192
  'Leftwards arrow':
    'prefix': '<-'
    'body': '←' #0x2190
  'Leftwards arrow-tail':
    'prefix': '-<'
    'body': '↢' #0x2919
  'Rightwards arrow-tail':
    'prefix': '>-'
    'body': '↣' #0x291A
  'Leftwards double arrow-tail':
    'prefix': '-<<'
    'body': '⤛' # 0x291B
  'Rightwards double arrow-tail':
    'prefix': '>>-'
    'body': '⤜' # 0x291C
  'Black star':
    'prefix': '*'
    'body': '★' #0x2605
'.source .haskell:not(.comment)':
  'Guard':
    'prefix': '|'
    'body': '| ${1:predicate} = ${0:definition}'
'.source .haskell.comment':
  'Haddock Postfix':
    'prefix': '|'
    'body': '| ${0:documentation}'
  'Haddock Prefix':
    'prefix': '^'
    'body': '^ ${0:documentation}'
'.source .haskell.constant.language.empty-list':
  'List Comprehension':
    'prefix': '['
    'body': '[ ${1:expression} | ${2:${3:name} <- ${4:expression}}$0'
'.source .haskell.meta.type':
  'deriving …':
    'prefix': 'der'
    'body': 'deriving (${0:Class})'
'.source.cabal':
  'executable':
    'prefix': 'exe'
    'body': '''
      executable ${1:exename}
        hs-source-dirs:      ${2:app}
        main-is:             ${3:Main.hs}
        ghc-options:         -Wall -threaded -rtsopts -with-rtsopts=-N
        build-depends:       base
                           , ${4:libname}
        default-language:    Haskell2010
       '''
  'library':
    'prefix': 'lib'
    'body': '''
      library
        hs-source-dirs:      ${1:src}
        exposed-modules:     ${2:Lib}
        other-modules:       ${3:Module}
        build-depends:       base >= 4 && < 5
        ghc-options:         -Wall
        default-language:    Haskell2010
      '''
  'repository':
    'prefix': 'repo'
    'body': '''
      source-repository head
        type:     git
        location: https://github.com/${1:githubuser}/${2:project}
      '''
  'test':
    'prefix': 'test'
    'body': '''
      test-suite ${1:test-name}
        type:                exitcode-stdio-1.0
        hs-source-dirs:      ${2:test}
        main-is:             ${3:Spec.hs}
        build-depends:       base
                           , ${4:libname}
        ghc-options:         -Wall -threaded -rtsopts -with-rtsopts=-N
        default-language:    Haskell2010
      '''
